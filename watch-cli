#!/bin/sh
# watch-cli - Stream anime, movies, and TV shows from the command line
# A POSIX-compliant tool for content discovery and streaming

set -e

VERSION="1.0.0"
CONFIG_DIR="${HOME}/.config/watch-cli"
CACHE_DIR="${CONFIG_DIR}/cache"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { printf "%b[INFO]%b %s\n" "$BLUE" "$NC" "$1" >&2; }
log_success() { printf "%b[OK]%b %s\n" "$GREEN" "$NC" "$1" >&2; }
log_warn() { printf "%b[WARN]%b %s\n" "$YELLOW" "$NC" "$1" >&2; }
log_error() { printf "%b[ERROR]%b %s\n" "$RED" "$NC" "$1" >&2; }

command_exists() { command -v "$1" >/dev/null 2>&1; }

setup_dirs() {
    mkdir -p "$CONFIG_DIR"
    mkdir -p "$CACHE_DIR"
}

check_deps() {
    local missing=0
    for cmd in curl grep sed jq fzf; do
        if ! command_exists "$cmd"; then
            log_error "Missing dependency: $cmd"
            missing=$((missing + 1))
        fi
    done
    
    if ! command_exists "mpv" && ! command_exists "vlc"; then
        log_error "No media player found (install mpv or vlc)"
        missing=$((missing + 1))
    fi
    
    if [ $missing -gt 0 ]; then
        return 1
    fi
    log_success "All dependencies found"
    return 0
}

detect_player() {
    if command_exists "mpv"; then
        echo "mpv"
    elif command_exists "vlc"; then
        echo "vlc"
    fi
}

url_encode() {
    printf '%s' "$1" | sed 's/ /%20/g'
}

search_allanime() {
    local query="$1"
    local encoded_query=$(url_encode "$query")
    log_info "Searching AllAnime for: $query"
    curl -s -H "User-Agent: Mozilla/5.0" \
        "https://api.allanime.day/api/v1/search?q=${encoded_query}&type=anime" 2>/dev/null | \
        jq -r '.result[] | "\(.id)\t\(.name)"' 2>/dev/null || echo ""
}

get_anime_episodes() {
    local anime_id="$1"
    log_info "Fetching episodes for anime ID: $anime_id"
    curl -s -H "User-Agent: Mozilla/5.0" \
        "https://api.allanime.day/api/v1/anime/${anime_id}/episodes" 2>/dev/null | \
        jq -r '.episodes[] | "\(.number)\t\(.title)"' 2>/dev/null || echo ""
}

get_anime_stream() {
    local anime_id="$1"
    local episode="$2"
    log_info "Getting stream for anime $anime_id episode $episode"
    curl -s -H "User-Agent: Mozilla/5.0" \
        "https://api.allanime.day/api/v1/anime/${anime_id}/episode/${episode}/stream" 2>/dev/null | \
        jq -r '.url' 2>/dev/null || echo ""
}

play_content() {
    local url="$1"
    local player=$(detect_player)
    
    if [ -z "$url" ]; then
        log_error "No stream URL provided"
        return 1
    fi
    
    log_info "Playing with $player: $url"
    case "$player" in
        mpv) mpv "$url" >/dev/null 2>&1 ;; 
        vlc) vlc "$url" >/dev/null 2>&1 & ;; 
        *) log_error "Unknown player"; return 1 ;; 
    esac
}

run_anime() {
    local query="$1"
    if [ -z "$query" ]; then
        read -p "Enter anime name: " query
    fi
    
    local anime_list=$(search_allanime "$query")
    if [ -z "$anime_list" ]; then
        log_error "No anime found"
        return 1
    fi
    
    local selected=$(echo "$anime_list" | \
        awk -F'\t' '{print $2 " (ID: " $1 ")"}' | \
        fzf --prompt="Select anime: " --height=15)
    
    if [ -z "$selected" ]; then
        log_warn "No anime selected"
        return 1
    fi
    
    local anime_id=$(echo "$selected" | grep -o 'ID: [^)]*' | cut -d' ' -f2)
    local episodes=$(get_anime_episodes "$anime_id")
    
    if [ -z "$episodes" ]; then
        log_error "No episodes found"
        return 1
    fi
    
    local selected_ep=$(echo "$episodes" | \
        awk -F'\t' '{print "Ep " $1 ": " $2}' | \
        fzf --prompt="Select episode: " --height=15)
    
    if [ -z "$selected_ep" ]; then
        return 1
    fi
    
    local episode_num=$(echo "$selected_ep" | grep -o 'Ep [^ ]*' | cut -d' ' -f2)
    local stream_url=$(get_anime_stream "$anime_id" "$episode_num")
    
    if [ -z "$stream_url" ]; then
        log_error "Could not fetch stream URL"
        return 1
    fi
    
    play_content "$stream_url"
}

show_help() {
    cat << 'EOF'
watch-cli v1.0.0 - Stream anime, movies, and TV shows from CLI

USAGE:
    watch-cli [COMMAND] [QUERY]
    watch-cli [OPTIONS]

COMMANDS:
    anime [QUERY]      Search and stream anime
    movie [QUERY]      Search and stream movies
    show [QUERY]       Search and stream TV shows

OPTIONS:
    -h, --help         Show this help message
    -v, --version      Show version information
    -c, --check        Check dependencies
    --setup            Setup configuration directories

EXAMPLES:
    watch-cli anime "one piece"
    watch-cli movie "inception"
    watch-cli show "breaking bad"
    watch-cli                      # Interactive mode

REQUIREMENTS:
    - curl, sed, grep, jq, fzf
    - mpv or vlc (media player)

For more info: https://github.com/ManoharSaini/watch-cli
EOF
}

show_version() {
    echo "watch-cli version $VERSION"
}

main() {
    setup_dirs
    
    case "${1:-}" in
        anime)
            check_deps || return 1
            run_anime "${2:-}"
            ;; 
        -h|--help)
            show_help
            ;;
        -v|--version)
            show_version
            ;;
        -c|--check)
            check_deps
            ;;
        --setup)
            log_info "Setting up watch-cli..."
            setup_dirs
            log_success "Setup complete"
            ;; 
        "")
            check_deps || return 1
            local choice=$(printf "Anime\nMovie\nTV Show" | \
                fzf --prompt="Select media type: " --height=10)
            case "$choice" in
                Anime) run_anime "" ;; 
                Movie) log_info "Movie support coming soon" ;; 
                "TV Show") log_info "TV show support coming soon" ;; 
                *) log_error "Invalid selection"; return 1 ;; 
            esac
            ;;
        *)
            log_error "Unknown command: $1"
            show_help
            return 1
            ;;
    esac
}

main "$@"